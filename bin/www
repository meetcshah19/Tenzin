#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tenzin:server');
var http = require('http');
var auth = require('../auth.json');
const Discord =require('discord.js');
var members=new Map();
var x;
var Discord2 = require('discord.io');
var client=new Discord.Client();
client.login(auth.token);
var bot = new Discord2.Client({
  token: auth.token,
  autorun: true
});
client.on('ready', () => {
  console.log('I am ready!');
  x=client.users;
  for(let [key,val] of x){
    members.set(val.username,key);
  }
  
});

bot.on('ready', function (evt) {
   console.log("-------------Lets do this :)");
   
   
});

bot.on('message', function (user, userID, channelID, message, evt) {
   
    evt.d.mentions.forEach(element => {
        message=message.replace('<@'+element.id+'>','@'+element.username);
    });
  io.emit('rm',message,user,evt.d.timestamp);

});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


var server = http.createServer(app);
var io = require('socket.io')(server);


io.on('connection', function(socket){
  
  socket.on('cm', function(msg,username){
    
    
    var s='';
    
    const hook = new Discord.WebhookClient(auth.webhookid, auth.webhooktoken);
    for (let i = 0; i < msg.length; i++) {
      var e = msg[i];
      if(e=='@'){
        while(!((msg[i+1]==' '))&&(i+1)!=msg.length){
          i++;
          s+=msg[i];
          e=msg[i];
          
        }
        
        if(members.get(s)!=undefined){
        msg=msg.replace('@'+s,'<@'+members.get(s)+'>');
      }
        
        s='';
      }
    }
    hook.sendMessage(msg,{username:username});
   
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

